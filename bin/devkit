#!/usr/bin/env ruby
require File.expand_path(File.join(File.dirname(__FILE__), %w[.. lib devkit]))

require 'optparse'

args = ARGV

options = []

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: devkit [options] developer_nick_name'
  opts.separator ''

  # specific options
  opts.separator 'Devkit specific options:'

  # devkit --init
  opts.on_tail('-i', '--init', 'Intializing devkit, creating .developers file') do
    Devkit::Core.init!
  end

  # devkit --list
  opts.on_tail('-l', '--list', 'Shows list of developers') do
    Devkit::Developer.list
  end

  # devkit --purge
  opts.on_tail('-p', '--purge', 'Removes all devkit generated files') do
    Devkit::Core.Purge!
  end

  # devkit --status
  opts.on_tail('-s', '--status', 'shows current developers nick name') do
    Devkit::Core.status
  end

  # devkit --remove praaveen
  opts.on_tail('-r developer_nick_name', '--remove developer_nick_name', String, 'Removes developer from .developers file') do |developer_nick_name|
    options = [:remove, developer_nick_name]
    Devkit::Developer.remove!(developer_nick_name)
  end

  # devkit --change praaveen
  opts.on_tail('-c developer_nick_name', '--change developer_nick_name', String, 'Switches the developer') do |developer_nick_name|
    options = [:switch, developer_nick_name]
    Devkit::Developer.switch!(developer_nick_name)
  end

  # devkit --add
  opts.on_tail('-a', '--add', 'Adding a new developer to .developers file') do
    Devkit::Developer.add!
  end

  # devkit --drop
  opts.on_tail('-d', '--drop', 'Drop existing identities') do
    Devkit::Developer.drop!
  end

  opts.on('-e N', '--expire N', Integer, 'Expire pair information in N hours') do |n|
    options = [:expire, n]
  end

  # general options
  opts.separator 'General options:'

  # devkit --help
  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  # devkit --version
  opts.on_tail('-v', '--version', 'Show version') do
    abort "Devkit v#{Devkit::VERSION}"
  end
end

if args.any?
  begin
    parser.parse!(args)
    if options.delete(:expire)
      system(Devkit.expire_command(options.pop))
    end
  rescue OptionParser::MissingArgument
    puts "Missing an argument?"
    puts ""
    puts parser
  rescue OptionParser::ParseError
    puts "Missing an argument?"
    puts ""
    puts parser
  end
else
  puts parser
end

